# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'f:\Code\Python-Projects\Inventory Manager\ui\main_menu.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1133, 652)
        MainWindow.setAcceptDrops(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(-1, -1, 20, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.toolBox = QtWidgets.QToolBox(self.centralwidget)
        self.toolBox.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.toolBox.setFrameShadow(QtWidgets.QFrame.Plain)
        self.toolBox.setObjectName("toolBox")
        self.inventory_page = QtWidgets.QWidget()
        self.inventory_page.setGeometry(QtCore.QRect(0, 0, 770, 504))
        self.inventory_page.setObjectName("inventory_page")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.inventory_page)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4.addLayout(self.verticalLayout)
        self.toolBox.addItem(self.inventory_page, "")
        self.view_page = QtWidgets.QWidget()
        self.view_page.setGeometry(QtCore.QRect(0, 0, 770, 504))
        self.view_page.setObjectName("view_page")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.view_page)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.search_layout = QtWidgets.QGridLayout()
        self.search_layout.setObjectName("search_layout")
        self.verticalLayout_4.addLayout(self.search_layout)
        self.horizontalLayout_5.addLayout(self.verticalLayout_4)
        self.toolBox.addItem(self.view_page, "")
        self.history_page = QtWidgets.QWidget()
        self.history_page.setGeometry(QtCore.QRect(0, 0, 770, 504))
        self.history_page.setObjectName("history_page")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.history_page)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.groupBox_2 = QtWidgets.QGroupBox(self.history_page)
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.categoryHistoryTable = QtWidgets.QTableWidget(self.groupBox_2)
        self.categoryHistoryTable.setEnabled(True)
        self.categoryHistoryTable.setRowCount(0)
        self.categoryHistoryTable.setColumnCount(2)
        self.categoryHistoryTable.setObjectName("categoryHistoryTable")
        self.categoryHistoryTable.horizontalHeader().setDefaultSectionSize(500)
        self.categoryHistoryTable.horizontalHeader().setMinimumSectionSize(42)
        self.categoryHistoryTable.verticalHeader().setDefaultSectionSize(30)
        self.categoryHistoryTable.verticalHeader().setMinimumSectionSize(28)
        self.horizontalLayout_12.addWidget(self.categoryHistoryTable)
        self.horizontalLayout_11.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.history_page)
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.singleItemHistoryTable = QtWidgets.QTableWidget(self.groupBox_3)
        self.singleItemHistoryTable.setEnabled(True)
        self.singleItemHistoryTable.setRowCount(0)
        self.singleItemHistoryTable.setColumnCount(2)
        self.singleItemHistoryTable.setObjectName("singleItemHistoryTable")
        self.singleItemHistoryTable.horizontalHeader().setDefaultSectionSize(500)
        self.singleItemHistoryTable.horizontalHeader().setMinimumSectionSize(42)
        self.horizontalLayout_13.addWidget(self.singleItemHistoryTable)
        self.horizontalLayout_11.addWidget(self.groupBox_3)
        self.verticalLayout_5.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_7.addLayout(self.verticalLayout_5)
        self.toolBox.addItem(self.history_page, "")
        self.verticalLayout_2.addWidget(self.toolBox)
        self.verticalLayout_status = QtWidgets.QVBoxLayout()
        self.verticalLayout_status.setContentsMargins(6, -1, 6, -1)
        self.verticalLayout_status.setObjectName("verticalLayout_status")
        self.verticalLayout_2.addLayout(self.verticalLayout_status)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1133, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuDownload_File = QtWidgets.QMenu(self.menuFile)
        self.menuDownload_File.setObjectName("menuDownload_File")
        self.menuOpen_Category = QtWidgets.QMenu(self.menuFile)
        self.menuOpen_Category.setObjectName("menuOpen_Category")
        self.menuUpload_File = QtWidgets.QMenu(self.menuFile)
        self.menuUpload_File.setObjectName("menuUpload_File")
        self.menuInventory = QtWidgets.QMenu(self.menuFile)
        self.menuInventory.setObjectName("menuInventory")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuSearch = QtWidgets.QMenu(self.menubar)
        self.menuSearch.setObjectName("menuSearch")
        self.menuSort = QtWidgets.QMenu(self.menubar)
        self.menuSort.setObjectName("menuSort")
        self.menuPurchase_Orders = QtWidgets.QMenu(self.menubar)
        self.menuPurchase_Orders.setObjectName("menuPurchase_Orders")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockWidget_create_add_remove = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget_create_add_remove.setEnabled(True)
        self.dockWidget_create_add_remove.setMinimumSize(QtCore.QSize(330, 453))
        self.dockWidget_create_add_remove.setFloating(False)
        self.dockWidget_create_add_remove.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dockWidget_create_add_remove.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        self.dockWidget_create_add_remove.setObjectName("dockWidget_create_add_remove")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.dockWidgetContents)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_exchange_price = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_exchange_price.setObjectName("label_exchange_price")
        self.verticalLayout_3.addWidget(self.label_exchange_price)
        self.label_category_name = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_category_name.setObjectName("label_category_name")
        self.verticalLayout_3.addWidget(self.label_category_name)
        self.label_total_unit_cost = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_total_unit_cost.setObjectName("label_total_unit_cost")
        self.verticalLayout_3.addWidget(self.label_total_unit_cost)
        self.line_2 = QtWidgets.QFrame(self.dockWidgetContents)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout_3.addWidget(self.line_2)
        self.gridLayout_Categor_Stock_Prices = QtWidgets.QGridLayout()
        self.gridLayout_Categor_Stock_Prices.setObjectName("gridLayout_Categor_Stock_Prices")
        self.verticalLayout_3.addLayout(self.gridLayout_Categor_Stock_Prices)
        self.label_units_possible = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_units_possible.setObjectName("label_units_possible")
        self.verticalLayout_3.addWidget(self.label_units_possible)
        self.line = QtWidgets.QFrame(self.dockWidgetContents)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_3.addWidget(self.line)
        self.label_2 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.lineEdit_search_items = QtWidgets.QLineEdit(self.dockWidgetContents)
        self.lineEdit_search_items.setInputMask("")
        self.lineEdit_search_items.setDragEnabled(False)
        self.lineEdit_search_items.setClearButtonEnabled(True)
        self.lineEdit_search_items.setObjectName("lineEdit_search_items")
        self.verticalLayout_3.addWidget(self.lineEdit_search_items)
        self.listWidget_itemnames = QtWidgets.QListWidget(self.dockWidgetContents)
        self.listWidget_itemnames.setStyleSheet("")
        self.listWidget_itemnames.setObjectName("listWidget_itemnames")
        self.verticalLayout_3.addWidget(self.listWidget_itemnames)
        self.groupBox = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.groupBox.setMinimumSize(QtCore.QSize(0, 60))
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_6.setContentsMargins(-1, 0, -1, 9)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.radioButton_category = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_category.setChecked(True)
        self.radioButton_category.setObjectName("radioButton_category")
        self.gridLayout.addWidget(self.radioButton_category, 0, 0, 1, 1)
        self.radioButton_single = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_single.setObjectName("radioButton_single")
        self.gridLayout.addWidget(self.radioButton_single, 0, 1, 1, 1)
        self.horizontalLayout_6.addLayout(self.gridLayout)
        self.verticalLayout_3.addWidget(self.groupBox)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.dockWidgetContents)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.spinBox_quantity = QtWidgets.QSpinBox(self.dockWidgetContents)
        self.spinBox_quantity.setAccelerated(True)
        self.spinBox_quantity.setMaximum(99999999)
        self.spinBox_quantity.setObjectName("spinBox_quantity")
        self.horizontalLayout_3.addWidget(self.spinBox_quantity)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_add_quantity = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_add_quantity.setObjectName("pushButton_add_quantity")
        self.horizontalLayout_2.addWidget(self.pushButton_add_quantity)
        self.pushButton_remove_quantity = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_remove_quantity.setObjectName("pushButton_remove_quantity")
        self.horizontalLayout_2.addWidget(self.pushButton_remove_quantity)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.pushButton_create_new = QtWidgets.QPushButton(self.dockWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_create_new.sizePolicy().hasHeightForWidth())
        self.pushButton_create_new.setSizePolicy(sizePolicy)
        self.pushButton_create_new.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton_create_new.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_create_new.setFont(font)
        self.pushButton_create_new.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.pushButton_create_new.setToolTip("")
        self.pushButton_create_new.setStyleSheet("\n"
"        QPushButton#pushButton_create_new{\n"
"            background-color: #3daee9;\n"
"            border: 0.04em solid  #3daee9;\n"
"            border-radius: 5px;\n"
"        }\n"
"        QPushButton#pushButton_create_new:hover{\n"
"            background-color: #49b3eb;\n"
"            border: 0.04em solid  #49b3eb;\n"
"            border-radius: 5px;\n"
"        }\n"
"        QPushButton#pushButton_create_new:pressed{\n"
"            background-color: #5cbaed;\n"
"            color: #bae2f8;\n"
"            border: 0.04em solid  #5cbaed;\n"
"            border-radius: 5px;\n"
"        }\n"
"QPushButton#pushButton_create_new:disabled{\n"
"            background-color: #222222;\n"
"            color: gray;\n"
"            border: 0.04em solid  gray;\n"
"            border-radius: 1px;\n"
"        }")
        self.pushButton_create_new.setCheckable(False)
        self.pushButton_create_new.setDefault(False)
        self.pushButton_create_new.setFlat(False)
        self.pushButton_create_new.setObjectName("pushButton_create_new")
        self.verticalLayout_3.addWidget(self.pushButton_create_new)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.dockWidget_create_add_remove.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_create_add_remove)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionDarkmode = QtWidgets.QAction(MainWindow)
        self.actionDarkmode.setCheckable(True)
        self.actionDarkmode.setIconVisibleInMenu(False)
        self.actionDarkmode.setObjectName("actionDarkmode")
        self.actionAbout_Qt = QtWidgets.QAction(MainWindow)
        self.actionAbout_Qt.setIconVisibleInMenu(True)
        self.actionAbout_Qt.setObjectName("actionAbout_Qt")
        self.actionView_License = QtWidgets.QAction(MainWindow)
        self.actionView_License.setObjectName("actionView_License")
        self.actionCheck_for_updates = QtWidgets.QAction(MainWindow)
        self.actionCheck_for_updates.setObjectName("actionCheck_for_updates")
        self.actionCheck_for_Updates = QtWidgets.QAction(MainWindow)
        self.actionCheck_for_Updates.setObjectName("actionCheck_for_Updates")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setIconVisibleInMenu(True)
        self.actionAbout.setObjectName("actionAbout")
        self.actionBackup = QtWidgets.QAction(MainWindow)
        self.actionBackup.setObjectName("actionBackup")
        self.actions = QtWidgets.QAction(MainWindow)
        self.actions.setObjectName("actions")
        self.actionUploadInventory = QtWidgets.QAction(MainWindow)
        self.actionUploadInventory.setObjectName("actionUploadInventory")
        self.actionDownloadInventory = QtWidgets.QAction(MainWindow)
        self.actionDownloadInventory.setObjectName("actionDownloadInventory")
        self.actionEbay = QtWidgets.QAction(MainWindow)
        self.actionEbay.setObjectName("actionEbay")
        self.actionLoad_Backup = QtWidgets.QAction(MainWindow)
        self.actionLoad_Backup.setIconVisibleInMenu(False)
        self.actionLoad_Backup.setObjectName("actionLoad_Backup")
        self.actionQuantity_in_Stock = QtWidgets.QAction(MainWindow)
        self.actionQuantity_in_Stock.setCheckable(True)
        self.actionQuantity_in_Stock.setChecked(True)
        self.actionQuantity_in_Stock.setObjectName("actionQuantity_in_Stock")
        self.actionPriority = QtWidgets.QAction(MainWindow)
        self.actionPriority.setCheckable(True)
        self.actionPriority.setIconVisibleInMenu(True)
        self.actionPriority.setObjectName("actionPriority")
        self.actionAscending = QtWidgets.QAction(MainWindow)
        self.actionAscending.setCheckable(True)
        self.actionAscending.setObjectName("actionAscending")
        self.actionDescending = QtWidgets.QAction(MainWindow)
        self.actionDescending.setCheckable(True)
        self.actionDescending.setChecked(True)
        self.actionDescending.setObjectName("actionDescending")
        self.actionAlphabatical = QtWidgets.QAction(MainWindow)
        self.actionAlphabatical.setCheckable(True)
        self.actionAlphabatical.setObjectName("actionAlphabatical")
        self.actionSort = QtWidgets.QAction(MainWindow)
        self.actionSort.setIconVisibleInMenu(False)
        self.actionSort.setObjectName("actionSort")
        self.actionAuto_back_up_to_cloud = QtWidgets.QAction(MainWindow)
        self.actionAuto_back_up_to_cloud.setCheckable(True)
        self.actionAuto_back_up_to_cloud.setIconVisibleInMenu(False)
        self.actionAuto_back_up_to_cloud.setObjectName("actionAuto_back_up_to_cloud")
        self.actionAdd_Purchase_Order = QtWidgets.QAction(MainWindow)
        self.actionAdd_Purchase_Order.setIconVisibleInMenu(False)
        self.actionAdd_Purchase_Order.setObjectName("actionAdd_Purchase_Order")
        self.actionRemove_Purchase_Order = QtWidgets.QAction(MainWindow)
        self.actionRemove_Purchase_Order.setIconVisibleInMenu(False)
        self.actionRemove_Purchase_Order.setObjectName("actionRemove_Purchase_Order")
        self.actionOpen_Purchase_Order = QtWidgets.QAction(MainWindow)
        self.actionOpen_Purchase_Order.setIconVisibleInMenu(False)
        self.actionOpen_Purchase_Order.setObjectName("actionOpen_Purchase_Order")
        self.actionRelease_Notes = QtWidgets.QAction(MainWindow)
        self.actionRelease_Notes.setIconVisibleInMenu(True)
        self.actionRelease_Notes.setObjectName("actionRelease_Notes")
        self.actionWebsite = QtWidgets.QAction(MainWindow)
        self.actionWebsite.setObjectName("actionWebsite")
        self.actionPrint_Inventory = QtWidgets.QAction(MainWindow)
        self.actionPrint_Inventory.setObjectName("actionPrint_Inventory")
        self.actionOpen_Folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_Folder.setIconVisibleInMenu(False)
        self.actionOpen_Folder.setObjectName("actionOpen_Folder")
        self.actionCreate_Category = QtWidgets.QAction(MainWindow)
        self.actionCreate_Category.setObjectName("actionCreate_Category")
        self.actionDelete_Category = QtWidgets.QAction(MainWindow)
        self.actionDelete_Category.setObjectName("actionDelete_Category")
        self.actionClone_Category = QtWidgets.QAction(MainWindow)
        self.actionClone_Category.setObjectName("actionClone_Category")
        self.actionOpen_Item_History = QtWidgets.QAction(MainWindow)
        self.actionOpen_Item_History.setObjectName("actionOpen_Item_History")
        self.menuDownload_File.addAction(self.actionDownloadInventory)
        self.menuUpload_File.addAction(self.actionUploadInventory)
        self.menuInventory.addAction(self.actionCreate_Category)
        self.menuInventory.addAction(self.actionDelete_Category)
        self.menuInventory.addSeparator()
        self.menuInventory.addAction(self.actionClone_Category)
        self.menuFile.addAction(self.menuUpload_File.menuAction())
        self.menuFile.addAction(self.menuDownload_File.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuInventory.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuOpen_Category.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionBackup)
        self.menuFile.addAction(self.actionLoad_Backup)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint_Inventory)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpen_Item_History)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuSettings.addAction(self.actionDarkmode)
        self.menuSettings.addAction(self.actionAuto_back_up_to_cloud)
        self.menuHelp.addAction(self.actionRelease_Notes)
        self.menuHelp.addAction(self.actionWebsite)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_Qt)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionCheck_for_Updates)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuSearch.addAction(self.actionEbay)
        self.menuSort.addAction(self.actionAlphabatical)
        self.menuSort.addAction(self.actionQuantity_in_Stock)
        self.menuSort.addAction(self.actionPriority)
        self.menuSort.addSeparator()
        self.menuSort.addAction(self.actionAscending)
        self.menuSort.addAction(self.actionDescending)
        self.menuSort.addSeparator()
        self.menuSort.addAction(self.actionSort)
        self.menuPurchase_Orders.addAction(self.actionAdd_Purchase_Order)
        self.menuPurchase_Orders.addAction(self.actionRemove_Purchase_Order)
        self.menuPurchase_Orders.addSeparator()
        self.menuPurchase_Orders.addAction(self.actionOpen_Purchase_Order)
        self.menuPurchase_Orders.addSeparator()
        self.menuPurchase_Orders.addAction(self.actionOpen_Folder)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuSort.menuAction())
        self.menubar.addAction(self.menuPurchase_Orders.menuAction())
        self.menubar.addAction(self.menuSearch.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.toolBox.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.inventory_page), _translate("MainWindow", "Edit Inventory"))
        self.toolBox.setItemToolTip(self.toolBox.indexOf(self.inventory_page), _translate("MainWindow", "Manage all items"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.view_page), _translate("MainWindow", "View Inventory (Read Only)"))
        self.toolBox.setItemToolTip(self.toolBox.indexOf(self.view_page), _translate("MainWindow", "View all inventory items as read only."))
        self.groupBox_2.setTitle(_translate("MainWindow", "Category History"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Single Item History"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.history_page), _translate("MainWindow", "View Removed Quantities History (Read Only)"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuDownload_File.setStatusTip(_translate("MainWindow", "A selection of files you can download."))
        self.menuDownload_File.setTitle(_translate("MainWindow", "Download File"))
        self.menuOpen_Category.setStatusTip(_translate("MainWindow", "Quick load categories"))
        self.menuOpen_Category.setTitle(_translate("MainWindow", "Open Category"))
        self.menuUpload_File.setStatusTip(_translate("MainWindow", "A selection of files you can upload online."))
        self.menuUpload_File.setTitle(_translate("MainWindow", "Upload File"))
        self.menuInventory.setTitle(_translate("MainWindow", "Inventory"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuSearch.setTitle(_translate("MainWindow", "Search"))
        self.menuSort.setTitle(_translate("MainWindow", "Sort by"))
        self.menuPurchase_Orders.setTitle(_translate("MainWindow", "Purchase Orders"))
        self.dockWidget_create_add_remove.setWindowTitle(_translate("MainWindow", "Item Controls"))
        self.label_exchange_price.setText(_translate("MainWindow", "Getting exchange rate..."))
        self.label_category_name.setText(_translate("MainWindow", "Category: "))
        self.label_total_unit_cost.setText(_translate("MainWindow", "Total Cost: "))
        self.label_units_possible.setText(_translate("MainWindow", "Total Units Possible:"))
        self.label_2.setText(_translate("MainWindow", "Search:"))
        self.lineEdit_search_items.setStatusTip(_translate("MainWindow", "Search items in this category"))
        self.lineEdit_search_items.setPlaceholderText(_translate("MainWindow", "Search for items..."))
        self.listWidget_itemnames.setStatusTip(_translate("MainWindow", "All items from this category"))
        self.groupBox.setTitle(_translate("MainWindow", "Change Quantities by"))
        self.radioButton_category.setText(_translate("MainWindow", "All Items in Category"))
        self.radioButton_single.setText(_translate("MainWindow", "Selected Item"))
        self.label.setText(_translate("MainWindow", "Batches Multiplier:"))
        self.spinBox_quantity.setStatusTip(_translate("MainWindow", "Quantity you want to add/remove to the selected item/category"))
        self.pushButton_add_quantity.setStatusTip(_translate("MainWindow", "Adds to the currently selected item"))
        self.pushButton_add_quantity.setText(_translate("MainWindow", "Add Quantity"))
        self.pushButton_remove_quantity.setStatusTip(_translate("MainWindow", "Removes from the currently selected item"))
        self.pushButton_remove_quantity.setText(_translate("MainWindow", "Remove Quantity"))
        self.pushButton_create_new.setStatusTip(_translate("MainWindow", "Create a new item"))
        self.pushButton_create_new.setText(_translate("MainWindow", "Add New Item"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setStatusTip(_translate("MainWindow", "Exit program"))
        self.actionDarkmode.setText(_translate("MainWindow", "Darkmode"))
        self.actionDarkmode.setStatusTip(_translate("MainWindow", "Toggle between darkmode and lightmode. Some changes need the program to restart to take effect."))
        self.actionAbout_Qt.setText(_translate("MainWindow", "About Qt"))
        self.actionView_License.setText(_translate("MainWindow", "View License"))
        self.actionCheck_for_updates.setText(_translate("MainWindow", "Check for updates"))
        self.actionCheck_for_Updates.setText(_translate("MainWindow", "Check for Updates..."))
        self.actionCheck_for_Updates.setStatusTip(_translate("MainWindow", "Checks for new updates on GitHub"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionAbout.setStatusTip(_translate("MainWindow", "Shows license, version, distrbuter and webpage."))
        self.actionBackup.setText(_translate("MainWindow", "Backup"))
        self.actionBackup.setStatusTip(_translate("MainWindow", "Backup your inventory locally on your computer."))
        self.actions.setText(_translate("MainWindow", "s"))
        self.actionUploadInventory.setText(_translate("MainWindow", "Inventory"))
        self.actionUploadInventory.setStatusTip(_translate("MainWindow", "Upload all inventory category and items."))
        self.actionDownloadInventory.setText(_translate("MainWindow", "Inventory"))
        self.actionDownloadInventory.setStatusTip(_translate("MainWindow", "Download all inventory categories and items."))
        self.actionEbay.setText(_translate("MainWindow", "Ebay"))
        self.actionEbay.setStatusTip(_translate("MainWindow", "Search ebay for prices (beta & deprecated)"))
        self.actionLoad_Backup.setText(_translate("MainWindow", "Load Local Backup"))
        self.actionLoad_Backup.setStatusTip(_translate("MainWindow", "Load a local backup that is saved to your computer."))
        self.actionQuantity_in_Stock.setText(_translate("MainWindow", "Quantity in Stock"))
        self.actionPriority.setText(_translate("MainWindow", "Priority"))
        self.actionAscending.setText(_translate("MainWindow", "Ascending"))
        self.actionDescending.setText(_translate("MainWindow", "Descending"))
        self.actionAlphabatical.setText(_translate("MainWindow", "Alphabatical"))
        self.actionSort.setText(_translate("MainWindow", "Apply Sorting Method"))
        self.actionAuto_back_up_to_cloud.setText(_translate("MainWindow", "Auto backup to cloud"))
        self.actionAuto_back_up_to_cloud.setStatusTip(_translate("MainWindow", "Automatically upload your changes to the cloud."))
        self.actionAdd_Purchase_Order.setText(_translate("MainWindow", "Add Purchase Order Template"))
        self.actionAdd_Purchase_Order.setStatusTip(_translate("MainWindow", "Add a new Purchase Order"))
        self.actionRemove_Purchase_Order.setText(_translate("MainWindow", "Remove Purchase Order Template"))
        self.actionRemove_Purchase_Order.setStatusTip(_translate("MainWindow", "Remove a PO Template, BUT does NOT remove the generated PO\'s"))
        self.actionOpen_Purchase_Order.setText(_translate("MainWindow", "Open Purchase Order"))
        self.actionOpen_Purchase_Order.setStatusTip(_translate("MainWindow", "Generate and open the selected Purchase Order"))
        self.actionRelease_Notes.setText(_translate("MainWindow", "Release Notes"))
        self.actionRelease_Notes.setStatusTip(_translate("MainWindow", "View release notes"))
        self.actionWebsite.setText(_translate("MainWindow", "Website"))
        self.actionWebsite.setToolTip(_translate("MainWindow", "https://piney-manufacturing-inventory.herokuapp.com"))
        self.actionWebsite.setStatusTip(_translate("MainWindow", "https://piney-manufacturing-inventory.herokuapp.com"))
        self.actionPrint_Inventory.setText(_translate("MainWindow", "Print Inventory"))
        self.actionPrint_Inventory.setStatusTip(_translate("MainWindow", "Generates a excel sheet summary of the current inventory."))
        self.actionOpen_Folder.setText(_translate("MainWindow", "Open Folder"))
        self.actionOpen_Folder.setStatusTip(_translate("MainWindow", "Open PO\'s directory in windows explorer"))
        self.actionCreate_Category.setText(_translate("MainWindow", "Create Category"))
        self.actionCreate_Category.setStatusTip(_translate("MainWindow", "Craete a new Category"))
        self.actionDelete_Category.setText(_translate("MainWindow", "Delete Category"))
        self.actionDelete_Category.setStatusTip(_translate("MainWindow", "Delete an existing Category."))
        self.actionClone_Category.setText(_translate("MainWindow", "Clone Category"))
        self.actionClone_Category.setStatusTip(_translate("MainWindow", "Clone an existing Category."))
        self.actionOpen_Item_History.setText(_translate("MainWindow", "Open Inventory History"))
        self.actionOpen_Item_History.setToolTip(_translate("MainWindow", "Open removed quantites history excel file."))
        self.actionOpen_Item_History.setStatusTip(_translate("MainWindow", "Open removed quantites history excel file."))
